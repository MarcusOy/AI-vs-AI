// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Snappy.API.Data;

#nullable disable

namespace Snappy.API.Migrations
{
    [DbContext(typeof(SnappyDBContext))]
    partial class SnappyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Snappy.API.Models.AuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReplacedByTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("Snappy.API.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MessagePayload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderCopyKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderCopyPayload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbe988ee-d420-4085-8cb8-92046bf8733a"),
                            CreatedOn = new DateTime(2021, 12, 30, 19, 22, 25, 239, DateTimeKind.Utc).AddTicks(340),
                            MessageKey = "messageKey",
                            MessagePayload = "Hi kyle, how are you doing?",
                            ReceiverId = new Guid("38d82377-b3d6-4145-b273-c136e065f57e"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Hi kyle, how are you doing?",
                            SenderId = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("741022a5-ab14-48ab-ad81-50b4eeaf8b82"),
                            CreatedOn = new DateTime(2021, 12, 30, 19, 23, 25, 239, DateTimeKind.Utc).AddTicks(350),
                            MessageKey = "messageKey",
                            MessagePayload = "I am doing great! Hbu?",
                            ReceiverId = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "I am doing great! Hbu?",
                            SenderId = new Guid("38d82377-b3d6-4145-b273-c136e065f57e"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("18ee49f3-f3d9-4b72-8114-61b95b513135"),
                            CreatedOn = new DateTime(2021, 12, 30, 19, 24, 25, 239, DateTimeKind.Utc).AddTicks(350),
                            MessageKey = "messageKey",
                            MessagePayload = "Great as well!",
                            ReceiverId = new Guid("38d82377-b3d6-4145-b273-c136e065f57e"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Great as well!",
                            SenderId = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("84f58382-cb2c-4d96-8670-fa3cd1232ce1"),
                            CreatedOn = new DateTime(2021, 12, 30, 19, 23, 25, 239, DateTimeKind.Utc).AddTicks(360),
                            MessageKey = "messageKey",
                            MessagePayload = "Hi marcus, how are you doing?",
                            ReceiverId = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Hi kyle, how are you doing?",
                            SenderId = new Guid("70c6700f-f48d-4621-bc1e-b6b2d7429381"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fbf4a654-5822-4c14-a733-858072f26d99"),
                            CreatedOn = new DateTime(2021, 12, 30, 19, 25, 25, 239, DateTimeKind.Utc).AddTicks(360),
                            MessageKey = "messageKey",
                            MessagePayload = "I am doing great! Hbu?",
                            ReceiverId = new Guid("70c6700f-f48d-4621-bc1e-b6b2d7429381"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "I am doing great! Hbu?",
                            SenderId = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8d89a700-e7d8-4097-8cbd-20ae7277c222"),
                            CreatedOn = new DateTime(2021, 12, 30, 19, 27, 25, 239, DateTimeKind.Utc).AddTicks(370),
                            MessageKey = "messageKey",
                            MessagePayload = "Great as well!",
                            ReceiverId = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Great as well!",
                            SenderId = new Guid("70c6700f-f48d-4621-bc1e-b6b2d7429381"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Snappy.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TwoFactorKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63a43564-4c33-409d-a356-d75539368e98"),
                            Active = true,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marcus",
                            LastName = "Orciuch",
                            Password = "eLGL40Qg6iUeWes+myszBd2PffhxlUm/AabyPUU+bY0=",
                            PublicKey = "key",
                            Salt = "HecjrZFEgdYjbRqnBUfXyg==",
                            TwoFactorKey = "XV2XSYXNWLTN75I7RYYOPHWRCJE3AYDY",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "marcus"
                        },
                        new
                        {
                            Id = new Guid("38d82377-b3d6-4145-b273-c136e065f57e"),
                            Active = true,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kyle",
                            LastName = "Orciuch",
                            Password = "pt5uYBTPlBOB0FPkdUADV+EXZa0NGVfpLLV1nz12QTY=",
                            PublicKey = "key",
                            Salt = "f1TMfCrv5mqRvgesXJxZDA==",
                            TwoFactorKey = "XBFPGKVHXGAC2AEHUOX6TW2VVCFT5WPZ",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "kyle"
                        },
                        new
                        {
                            Id = new Guid("70c6700f-f48d-4621-bc1e-b6b2d7429381"),
                            Active = true,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Patrick",
                            LastName = "Mansour",
                            Password = "8RDm00xtXA0fJn7bvhpyjoDftXQzlaWifReqNGg/Lak=",
                            PublicKey = "key",
                            Salt = "l16coAX0dhAITQOhJcne3A==",
                            TwoFactorKey = "OUB26D5PPSKOPW6RFRKM2MHTETI2WW76",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "patrick"
                        });
                });

            modelBuilder.Entity("Snappy.API.Models.AuthToken", b =>
                {
                    b.HasOne("Snappy.API.Models.AuthToken", "ReplacedByToken")
                        .WithMany()
                        .HasForeignKey("ReplacedByTokenId");

                    b.HasOne("Snappy.API.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedByToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Snappy.API.Models.Message", b =>
                {
                    b.HasOne("Snappy.API.Models.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snappy.API.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Snappy.API.Models.User", b =>
                {
                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
